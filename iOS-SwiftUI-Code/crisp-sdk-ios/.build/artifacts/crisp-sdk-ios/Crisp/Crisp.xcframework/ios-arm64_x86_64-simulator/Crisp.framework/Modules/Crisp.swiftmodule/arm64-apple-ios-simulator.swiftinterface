// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-alias CasePaths=CrispAliasedCasePaths -module-alias CombineSchedulers=CrispAliasedCombineSchedulers -module-alias IdentifiedCollections=CrispAliasedIdentifiedCollections -module-alias CustomDump=CrispAliasedCustomDump -module-alias XCTestDynamicOverlay=CrispAliasedXCTestDynamicOverlay -module-alias Clocks=CrispAliasedClocks -module-alias Dependencies=CrispAliasedDependencies -module-name Crisp
import Foundation
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
public enum Callback {
  case chatClosed(Crisp.Callback.VoidHandler)
  case chatOpened(Crisp.Callback.VoidHandler)
  case messageReceived(Crisp.Callback.MessageHandler)
  case messageSent(Crisp.Callback.MessageHandler)
  case sessionLoaded(Crisp.Callback.SessionIdHandler)
}
extension Crisp.Callback {
  public typealias MessageHandler = (Crisp.Message) -> Swift.Void
  public typealias SessionIdHandler = (Swift.String) -> Swift.Void
  public typealias VoidHandler = () -> Swift.Void
}
@_hasMissingDesignatedInitializers final public class CallbackToken {
  @objc deinit
}
public struct ChatView : SwiftUI.View {
  public init()
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s5Crisp8ChatViewV4bodyQrvp", 0) __
}
@_hasMissingDesignatedInitializers @objc(CRSPChatViewController) @_Concurrency.MainActor(unsafe) final public class ChatViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override final public func viewWillLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override final public func viewWillAppear(_ animated: Swift.Bool)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc final public class CrispSDK : ObjectiveC.NSObject {
  @objc public static func configure(websiteID: Swift.String)
  @objc public static func setTokenID(tokenID: Swift.String)
  @objc public static func openChat()
  @objc public static func searchHelpdesk()
  @objc public static func openHelpdeskArticle(locale: Swift.String, slug: Swift.String, title: Swift.String? = nil, category: Swift.String? = nil)
  public static func showMessage(with content: Crisp.Message.Content)
  public static func addCallback(_ callback: Crisp.Callback) -> Crisp.CallbackToken
  public static func removeCallback(token: Crisp.CallbackToken)
  @available(*, deprecated, message: "locale is no longer available")
  @objc public static var locale: Foundation.Locale
  @objc public static let user: Crisp.User
  @objc public static let session: Crisp.Session
  public static var version: Swift.String {
    get
  }
  @objc deinit
}
@frozen public enum Severity : Swift.Int {
  case debug
  case info
  case warning
  case error
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension Crisp.Severity : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
public protocol CrispLogHandler {
  func log(severity: Crisp.Severity, message: Swift.String)
  func log(error: Swift.Error)
}
extension Crisp.CrispSDK {
  public static func setLogLevel(_ severity: Crisp.Severity)
  public static func addLogHandler(_ handler: some CrispLogHandler)
  @available(*, deprecated, message: "log is no longer available. Use addLogHandler(_:) to add a custom logging handler instead.")
  public static var log: (Crisp.Severity, @autoclosure () -> Swift.String) -> Swift.Void
  @available(*, deprecated, message: "logError is no longer available. Use addLogHandler(_:) to add a custom logging handler instead.")
  public static var logError: (Swift.Error) -> Swift.Void
}
public struct Message : Swift.Equatable, Swift.Sendable {
  public var isMe: Swift.Bool
  public var content: Crisp.Message.Content
  public var origin: Crisp.Message.Origin
  public var timestamp: Foundation.Date
  public var fingerprint: Swift.Int64
  public var from: Crisp.Message.Sender
  public var user: Crisp.Message.User?
  public static func == (a: Crisp.Message, b: Crisp.Message) -> Swift.Bool
}
extension Crisp.Message {
  public enum Origin : Swift.Equatable, Swift.Sendable {
    case local
    case network
    case update
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: Crisp.Message.Origin, b: Crisp.Message.Origin) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Sender : Swift.Equatable, Swift.Sendable {
    case user
    case `operator`
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: Crisp.Message.Sender, b: Crisp.Message.Sender) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct User : Swift.Equatable, Swift.Sendable {
    public var nickname: Swift.String?
    public var userId: Swift.String?
    public var avatar: Foundation.URL?
    public static func == (a: Crisp.Message.User, b: Crisp.Message.User) -> Swift.Bool
  }
}
extension Crisp.Message {
  public enum Content : Swift.Equatable, Swift.Sendable {
    case animation(Crisp.Message.Content.ImageFile)
    case audio(Crisp.Message.Content.AudioFile)
    case carousel(Crisp.Message.Content.CarouselValue)
    case field(Crisp.Message.Content.FieldValue)
    case file(Crisp.Message.Content.File)
    case picker(Crisp.Message.Content.PickerValue)
    case text(Swift.String)
    case textWithAttachment(Swift.String, Crisp.Message.Content.WebsiteAttachment, Crisp.Message.Content.AttachmentPreview?)
    case textWithVideoAttachment(Swift.String, Crisp.Message.Content.WebsiteAttachment, Crisp.Message.Content.EmbeddedPreview)
    public static func == (a: Crisp.Message.Content, b: Crisp.Message.Content) -> Swift.Bool
  }
}
extension Crisp.Message.Content {
  public struct WebsiteAttachment : Swift.Equatable, Swift.Sendable {
    public var title: Swift.String
    public var website: Swift.String
    public var url: Foundation.URL
    public init(title: Swift.String, website: Swift.String, url: Foundation.URL)
    public static func == (a: Crisp.Message.Content.WebsiteAttachment, b: Crisp.Message.Content.WebsiteAttachment) -> Swift.Bool
  }
  public struct AttachmentPreview : Swift.Equatable, Swift.Sendable {
    public var excerpt: Swift.String?
    public var image: Foundation.URL
    public init(excerpt: Swift.String?, image: Foundation.URL)
    public static func == (a: Crisp.Message.Content.AttachmentPreview, b: Crisp.Message.Content.AttachmentPreview) -> Swift.Bool
  }
  public struct EmbeddedPreview : Swift.Equatable, Swift.Sendable {
    public var excerpt: Swift.String?
    public var image: Foundation.URL
    public var embed: Foundation.URL
    public init(excerpt: Swift.String?, image: Foundation.URL, embed: Foundation.URL)
    public static func == (a: Crisp.Message.Content.EmbeddedPreview, b: Crisp.Message.Content.EmbeddedPreview) -> Swift.Bool
  }
  public struct ImageFile : Swift.Equatable, Swift.Sendable {
    public var mimeType: Swift.String
    public var url: Foundation.URL
    public init(mimeType: Swift.String, url: Foundation.URL)
    public static func == (a: Crisp.Message.Content.ImageFile, b: Crisp.Message.Content.ImageFile) -> Swift.Bool
  }
  public struct AudioFile : Swift.Equatable, Swift.Sendable {
    public var mimeType: Swift.String
    public var url: Foundation.URL
    public var duration: Swift.Int
    public init(mimeType: Swift.String, url: Foundation.URL, duration: Swift.Int)
    public static func == (a: Crisp.Message.Content.AudioFile, b: Crisp.Message.Content.AudioFile) -> Swift.Bool
  }
  public struct CarouselValue : Swift.Equatable, Swift.Sendable {
    public struct Target : Swift.Equatable, Swift.Sendable {
      public struct Action : Swift.Equatable, Swift.Sendable {
        public var label: Swift.String
        public var url: Foundation.URL
        public init(label: Swift.String, url: Foundation.URL)
        public static func == (a: Crisp.Message.Content.CarouselValue.Target.Action, b: Crisp.Message.Content.CarouselValue.Target.Action) -> Swift.Bool
      }
      public var title: Swift.String
      public var description: Swift.String
      public var image: Foundation.URL?
      public var actions: [Crisp.Message.Content.CarouselValue.Target.Action]
      public init(title: Swift.String, description: Swift.String, image: Foundation.URL? = nil, actions: [Crisp.Message.Content.CarouselValue.Target.Action])
      public static func == (a: Crisp.Message.Content.CarouselValue.Target, b: Crisp.Message.Content.CarouselValue.Target) -> Swift.Bool
    }
    public var text: Swift.String
    public var targets: [Crisp.Message.Content.CarouselValue.Target]
    public init(text: Swift.String, targets: [Crisp.Message.Content.CarouselValue.Target])
    public static func == (a: Crisp.Message.Content.CarouselValue, b: Crisp.Message.Content.CarouselValue) -> Swift.Bool
  }
  public struct FieldValue : Swift.Equatable, Swift.Sendable {
    public var id: Swift.String
    public var text: Swift.String
    public var explain: Swift.String
    public var value: Swift.String?
    public init(id: Swift.String, text: Swift.String, explain: Swift.String, value: Swift.String?)
    public static func == (a: Crisp.Message.Content.FieldValue, b: Crisp.Message.Content.FieldValue) -> Swift.Bool
  }
  public struct File : Swift.Codable, Swift.Equatable, Swift.Sendable {
    public var name: Swift.String
    public var mimeType: Swift.String
    public var url: Foundation.URL
    public init(name: Swift.String, mimeType: Swift.String, url: Foundation.URL)
    public static func == (a: Crisp.Message.Content.File, b: Crisp.Message.Content.File) -> Swift.Bool
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public struct PickerValue : Swift.Equatable, Swift.Sendable {
    public struct Choice : Swift.Equatable, Swift.Sendable {
      public struct Action : Swift.Equatable, Swift.Sendable {
        public enum Kind : Swift.String, Swift.Equatable, Swift.Sendable {
          case link
          case frame
          public init?(rawValue: Swift.String)
          public typealias RawValue = Swift.String
          public var rawValue: Swift.String {
            get
          }
        }
        public var type: Crisp.Message.Content.PickerValue.Choice.Action.Kind
        public var target: Foundation.URL
        public init(type: Crisp.Message.Content.PickerValue.Choice.Action.Kind, target: Foundation.URL)
        public static func == (a: Crisp.Message.Content.PickerValue.Choice.Action, b: Crisp.Message.Content.PickerValue.Choice.Action) -> Swift.Bool
      }
      public var label: Swift.String
      public var icon: Swift.String?
      public var selected: Swift.Bool
      public var value: Swift.String
      public var action: Crisp.Message.Content.PickerValue.Choice.Action?
      public init(label: Swift.String, icon: Swift.String? = nil, selected: Swift.Bool, value: Swift.String, action: Crisp.Message.Content.PickerValue.Choice.Action? = nil)
      public static func == (a: Crisp.Message.Content.PickerValue.Choice, b: Crisp.Message.Content.PickerValue.Choice) -> Swift.Bool
    }
    public var id: Swift.String
    public var text: Swift.String
    public var choices: [Crisp.Message.Content.PickerValue.Choice]
    public init(id: Swift.String, text: Swift.String, choices: [Crisp.Message.Content.PickerValue.Choice])
    public static func == (a: Crisp.Message.Content.PickerValue, b: Crisp.Message.Content.PickerValue) -> Swift.Bool
  }
}
@objc(CRSPSessionEventColor) public enum SessionEventColor : Swift.Int {
  case red
  case orange
  case yellow
  case green
  case blue
  case purple
  case pink
  case brown
  case grey
  case black
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(CRSPSessionEvent) @objcMembers final public class SessionEvent : ObjectiveC.NSObject {
  @objc final public var name: Swift.String
  final public var color: Crisp.SessionEventColor?
  public init(name: Swift.String, color: Crisp.SessionEventColor?)
  @objc final public func setBool(_ value: Swift.Bool, forKey key: Swift.String)
  @objc final public func setInt(_ value: Swift.Int, forKey key: Swift.String)
  @objc final public func setString(_ value: Swift.String, forKey key: Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(CRSPSession) @objcMembers final public class Session : ObjectiveC.NSObject {
  @objc final public var isOngoing: Swift.Bool {
    @objc get
  }
  @objc final public var identifier: Swift.String? {
    @objc get
  }
  @objc final public func setBool(_ value: Swift.Bool, forKey key: Swift.String)
  final public func getBool(forKey key: Swift.String) -> Swift.Bool?
  @objc final public func setInt(_ value: Swift.Int, forKey key: Swift.String)
  final public func getInt(forKey key: Swift.String) -> Swift.Int?
  @objc final public func setString(_ value: Swift.String, forKey key: Swift.String)
  @objc final public func getString(forKey key: Swift.String) -> Swift.String?
  @objc @available(*, deprecated, renamed: "pushEvents")
  final public func pushEvent(_ event: Crisp.SessionEvent)
  @objc final public func pushEvents(_ events: [Crisp.SessionEvent])
  @objc @available(*, deprecated, renamed: "segments")
  final public var segment: Swift.String? {
    @objc get
    @objc set
  }
  @objc final public var segments: [Swift.String]? {
    @objc get
    @objc set
  }
  @objc final public func reset()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(CRSPUser) @objcMembers final public class User : ObjectiveC.NSObject {
  @objc final public var email: Swift.String? {
    @objc get
    @objc set
  }
  @objc final public var nickname: Swift.String? {
    @objc get
    @objc set
  }
  @objc final public var phone: Swift.String? {
    @objc get
    @objc set
  }
  @objc final public var avatar: Foundation.URL? {
    @objc get
    @objc set
  }
  @objc final public var company: Crisp.Company? {
    @objc get
    @objc set
  }
  @objc deinit
}
@objc(CRSPCompany) @objcMembers final public class Company : ObjectiveC.NSObject {
  @objc final public let name: Swift.String?
  @objc final public let url: Foundation.URL?
  @objc final public let companyDescription: Swift.String?
  @objc final public let employment: Crisp.Employment?
  @objc final public let geolocation: Crisp.Geolocation?
  @objc public init(name: Swift.String?, url: Foundation.URL?, companyDescription: Swift.String?, employment: Crisp.Employment?, geolocation: Crisp.Geolocation?)
  @objc deinit
}
@objc(CRSPEmployment) @objcMembers final public class Employment : ObjectiveC.NSObject {
  @objc final public let title: Swift.String?
  @objc final public let role: Swift.String?
  @objc public init(title: Swift.String?, role: Swift.String?)
  @objc deinit
}
@objc(CRSPGeolocation) @objcMembers final public class Geolocation : ObjectiveC.NSObject {
  @objc final public let city: Swift.String?
  @objc final public let country: Swift.String?
  @objc public init(city: Swift.String?, country: Swift.String?)
  @objc deinit
}
extension Crisp.Severity : Swift.Equatable {}
extension Crisp.Severity : Swift.Hashable {}
extension Crisp.Severity : Swift.RawRepresentable {}
extension Crisp.Severity : Swift.Sendable {}
extension Crisp.Message.Origin : Swift.Hashable {}
extension Crisp.Message.Sender : Swift.Hashable {}
extension Crisp.Message.Content.PickerValue.Choice.Action.Kind : Swift.Hashable {}
extension Crisp.Message.Content.PickerValue.Choice.Action.Kind : Swift.RawRepresentable {}
extension Crisp.SessionEventColor : Swift.Equatable {}
extension Crisp.SessionEventColor : Swift.Hashable {}
extension Crisp.SessionEventColor : Swift.RawRepresentable {}
