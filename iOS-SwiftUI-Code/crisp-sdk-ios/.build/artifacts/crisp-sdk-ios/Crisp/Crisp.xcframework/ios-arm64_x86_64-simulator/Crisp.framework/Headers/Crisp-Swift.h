#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
#ifndef CRISP_SWIFT_H
#define CRISP_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Crisp",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSCoder;
@class NSString;
@class NSBundle;

/// The ViewController that hosts the Crisp chat (UIKit).
/// important:
/// Make sure that you have configured your Website ID before you present the
/// <code>ChatViewController</code>. See: <code>CrispSDK/configure(websiteID:)</code>.
/// You can present the <code>ChatViewController</code> like you would present any other <code>UIViewController</code>.
/// \code
/// import Crisp
///
/// class YourViewController: UIViewController {
///
///     // ...
///
///     @IBAction func startChat(_ sender: Any) {
///         self.present(ChatViewController(), animated: true)
///     }
/// }
///
/// \endcode<ul>
///   <li>
///     Tip: If you’re using SwiftUI you can present the <code>ChatView</code> instead.
///   </li>
/// </ul>
SWIFT_CLASS_NAMED("ChatViewController")
@interface CRSPChatViewController : UIViewController
/// Initializes the <code>ChatViewController</code>.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)_ SWIFT_UNAVAILABLE;
/// Called after the controller’s view is loaded into memory.
- (void)viewDidLoad;
/// Called to notify the view controller that its view is about to layout its subviews.
- (void)viewWillLayoutSubviews;
/// Performs some action before the view appears.
/// \param animated A Boolean value that indicates whether the view will appear using an
/// animation.
///
- (void)viewWillAppear:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@class NSURL;
@class CRSPEmployment;
@class CRSPGeolocation;

/// Identifies the company with which the current user is affiliated.
SWIFT_CLASS_NAMED("Company")
@interface CRSPCompany : NSObject
/// Company name
@property (nonatomic, readonly, copy) NSString * _Nullable name;
/// Company website URL
@property (nonatomic, readonly, copy) NSURL * _Nullable url;
/// Company description
@property (nonatomic, readonly, copy) NSString * _Nullable companyDescription;
/// User employment in company
@property (nonatomic, readonly, strong) CRSPEmployment * _Nullable employment;
/// Company location
@property (nonatomic, readonly, strong) CRSPGeolocation * _Nullable geolocation;
/// Initializes a new <code>Company</code>.
/// \param name The name for the company.
///
/// \param url The website URL for the company.
///
/// \param companyDescription The description for the company.
///
/// \param employment The user employment in the company.
///
/// \param geolocation The location of the company.
///
- (nonnull instancetype)initWithName:(NSString * _Nullable)name url:(NSURL * _Nullable)url companyDescription:(NSString * _Nullable)companyDescription employment:(CRSPEmployment * _Nullable)employment geolocation:(CRSPGeolocation * _Nullable)geolocation OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class NSLocale;
@class CRSPUser;
@class CRSPSession;

/// The main entry point to set up your Website ID and configure a chat session.
SWIFT_CLASS("_TtC5Crisp8CrispSDK")
@interface CrispSDK : NSObject
/// Associates the Chatbox with your Website ID.
/// important:
/// Make sure to call this method before you interact with any other SDK methods and
/// before you present the Chatbox UI. This can be done for example in your
/// <code>UIApplicationDelegate</code> or <code>UISceneDelegate</code>.
/// \code
/// import Crisp
/// import UIKit
///
/// @main
/// class AppDelegate: UIResponder, UIApplicationDelegate {
///   func application(
///     _ application: UIApplication,
///     didFinishLaunchingWithOptions _: [UIApplication.LaunchOptionsKey: Any]?
///   ) -> Bool {
///     CrispSDK.configure(websiteID: "b8df20e8-0126-4126-b14e-9709f7e58a0d")
///
///     // ...
///
///     return true
///   }
/// }
///
/// \endcodeYou can find your Website ID in the <a href="https://app.crisp.chat/settings/websites/">Crisp
/// dashboard</a>.
/// <img src="copy-website-id" alt="Copy your Website ID"/>
/// \param websiteID Your Website ID.
///
+ (void)configureWithWebsiteID:(NSString * _Nonnull)websiteID;
/// Associates the chat session with a token.
/// If your website shows the chatbox for authenticated users only - in other words: users for
/// which you have an internal identification value, such as an user ID, an email or a token - you
/// may want to ensure that the Crisp chat session associated to that user stays the same,
/// whatever the device he is on and whether your user clears his cookies or not. This ensures you
/// get chats from the same user in the same Crisp session.
/// You can do so using Crisp Tokens. A token is a private and secure arbitrary value that is
/// known to your system, and sent when you inject Crisp in the page. Each user must be associated
/// to a different token (if you use the token system).
/// <a href="https://youtu.be/qiOoW5u211U">Watch a video tutorial</a>
/// <ul>
///   <li>
///     Tip: You can find more information about this concept in the <a href="https://docs.crisp.chat/guides/chatbox-sdks/web-sdk/session-continuity/">documentation of the Web
///     SDK</a>.
///   </li>
/// </ul>
/// \param tokenID A unique token by which your system can identify one of your users.
///
+ (void)setTokenIDWithTokenID:(NSString * _Nonnull)tokenID;
/// Opens the chat view.
/// note:
/// If the <code>ChatViewController</code> (UIKit) or <code>ChatView</code> (SwiftUI) is currently
/// presented, it will switch to the “Chat” tab immediately. If it is not presented yet it
/// will start with the “Chat” tab on the next presentation.
+ (void)openChat;
/// Opens helpdesk search interface.
/// note:
/// If the <code>ChatViewController</code> (UIKit) or <code>ChatView</code> (SwiftUI) is currently
/// presented, it will switch to the “Helpdesk” tab immediately. If it is not presented yet it
/// will start with the “Helpdesk” tab on the next presentation.
+ (void)searchHelpdesk;
/// Opens target helpdesk article.
/// <code>locale</code> and <code>slug</code> can be found in the full URL of the article; slug is the ID at the end
/// of the URL; title and category are optional.
/// \code
/// // Example 1: opens an article with ID '10ud15y' for locale 'en' (English)
/// CrispSDK.openHelpdeskArticle(locale: "en", slug: "10ud15y")
///
/// \endcode\code
/// // Example 1: opens an article with ID '10ud15y' for locale 'en' (English)
/// CrispSDK.openHelpdeskArticle(
///     locale: "en",
///     slug: "1nko1cm",
///     title: "How to install Crisp Live Chat on Nuxt.js",
///     category: "Install Crisp"
/// )
///
/// \endcodenote:
/// If the <code>ChatViewController</code> (UIKit) or <code>ChatView</code> (SwiftUI) is currently
/// presented, it will switch to the Helpdesk article immediately. If it is not presented yet
/// it will start with the Helpdesk article on the next presentation.
/// \param locale The locale of the article to show.
///
/// \param slug The slug of the article to show.
///
/// \param title The title of the article to show.
///
/// \param category The category of the article to show.
///
+ (void)openHelpdeskArticleWithLocale:(NSString * _Nonnull)locale slug:(NSString * _Nonnull)slug title:(NSString * _Nullable)title category:(NSString * _Nullable)category;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSLocale * _Nonnull locale SWIFT_DEPRECATED_MSG("locale is no longer available");)
+ (NSLocale * _Nonnull)locale SWIFT_WARN_UNUSED_RESULT;
+ (void)setLocale:(NSLocale * _Nonnull)value;
/// The shared <code>User</code> object.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) CRSPUser * _Nonnull user;)
+ (CRSPUser * _Nonnull)user SWIFT_WARN_UNUSED_RESULT;
/// The shared <code>Session</code> object.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) CRSPSession * _Nonnull session;)
+ (CRSPSession * _Nonnull)session SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Indicates the manner in which the current user is affiliated with their company.
SWIFT_CLASS_NAMED("Employment")
@interface CRSPEmployment : NSObject
/// User title in company
@property (nonatomic, readonly, copy) NSString * _Nullable title;
/// User role in company
@property (nonatomic, readonly, copy) NSString * _Nullable role;
/// Initializes a new <code>Employment</code>.
/// \param title The user’s title in their company.
///
/// \param role The user’s role in their company.
///
- (nonnull instancetype)initWithTitle:(NSString * _Nullable)title role:(NSString * _Nullable)role OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Indicates the location of the company with which the current user is affiliated.
SWIFT_CLASS_NAMED("Geolocation")
@interface CRSPGeolocation : NSObject
/// City name
@property (nonatomic, readonly, copy) NSString * _Nullable city;
/// Country code
@property (nonatomic, readonly, copy) NSString * _Nullable country;
/// Initializes a new <code>Geolocation</code>.
/// \param city The name of the city.
///
/// \param country The country code.
///
- (nonnull instancetype)initWithCity:(NSString * _Nullable)city country:(NSString * _Nullable)country OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class CRSPSessionEvent;

/// Represents the current session.
SWIFT_CLASS_NAMED("Session")
@interface CRSPSession : NSObject
/// Returns true if a session is ongoing (ie. messages have been received or sent), else false.
@property (nonatomic, readonly) BOOL isOngoing;
/// Returns the current session identifier (or null if not yet loaded).
@property (nonatomic, readonly, copy) NSString * _Nullable identifier;
/// Set the session data for a given key, with a <code>Bool</code> value.
- (void)setBool:(BOOL)value forKey:(NSString * _Nonnull)key;
/// Set the session data for a given key, with a <code>Int</code> value.
- (void)setInt:(NSInteger)value forKey:(NSString * _Nonnull)key;
/// Set the session data for a given key, with a <code>String</code> value.
- (void)setString:(NSString * _Nonnull)value forKey:(NSString * _Nonnull)key;
/// Returns the current session data for a given key.
- (NSString * _Nullable)getStringForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (void)pushEvent:(CRSPSessionEvent * _Nonnull)event SWIFT_DEPRECATED_MSG("", "pushEvents:");
/// Sets one or multiple session events, with a text and an optional data object and optional
/// color.
/// \param events The events to push
///
- (void)pushEvents:(NSArray<CRSPSessionEvent *> * _Nonnull)events;
@property (nonatomic, copy) NSString * _Nullable segment SWIFT_DEPRECATED_MSG("", "segments");
/// Sets the session segments.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable segments;
/// Initiates a new chat session by resetting the chatbox.
/// This method should be invoked when the user logs out in your application.
- (void)reset;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Represents a session event.
/// If you are using Crisp in an app where users are authenticated, you may want to push events
/// to retarget them later on different channels.
/// note:
/// You should not create an instance of this class yourself. Instead interact with the
/// shared instance at <code>CrispSDK/session</code>.
SWIFT_CLASS_NAMED("SessionEvent")
@interface CRSPSessionEvent : NSObject
/// The name of the event.
@property (nonatomic, copy) NSString * _Nonnull name;
/// Set the event data for a given key, with a <code>Bool</code> value.
- (void)setBool:(BOOL)value forKey:(NSString * _Nonnull)key;
/// Set the event data for a given key, with a <code>Int</code> value.
- (void)setInt:(NSInteger)value forKey:(NSString * _Nonnull)key;
/// Set the event data for a given key, with a <code>String</code> value.
- (void)setString:(NSString * _Nonnull)value forKey:(NSString * _Nonnull)key;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


typedef SWIFT_ENUM_NAMED(NSInteger, CRSPSessionEventColor, "SessionEventColor", open) {
  CRSPSessionEventColorRed = 0,
  CRSPSessionEventColorOrange = 1,
  CRSPSessionEventColorYellow = 2,
  CRSPSessionEventColorGreen = 3,
  CRSPSessionEventColorBlue = 4,
  CRSPSessionEventColorPurple = 5,
  CRSPSessionEventColorPink = 6,
  CRSPSessionEventColorBrown = 7,
  CRSPSessionEventColorGrey = 8,
  CRSPSessionEventColorBlack = 9,
};


/// Represents the current user.
/// This class can be utilized to supplement information regarding users, aiding website operators
/// in identifying and segmenting them.
/// note:
/// You should not create an instance of this class yourself. Instead interact with the
/// shared instance at <code>CrispSDK/user</code>.
SWIFT_CLASS_NAMED("User")
@interface CRSPUser : NSObject
/// Sets the user email (must be a valid email).
@property (nonatomic, copy) NSString * _Nullable email;
/// Sets the user nickname.
@property (nonatomic, copy) NSString * _Nullable nickname;
/// Sets the user phone (must be a valid phone number).
@property (nonatomic, copy) NSString * _Nullable phone;
/// Sets the user avatar.
@property (nonatomic, copy) NSURL * _Nullable avatar;
/// Sets the user company (with optional user employment data).
@property (nonatomic, strong) CRSPCompany * _Nullable company;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
#ifndef CRISP_SWIFT_H
#define CRISP_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Crisp",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSCoder;
@class NSString;
@class NSBundle;

/// The ViewController that hosts the Crisp chat (UIKit).
/// important:
/// Make sure that you have configured your Website ID before you present the
/// <code>ChatViewController</code>. See: <code>CrispSDK/configure(websiteID:)</code>.
/// You can present the <code>ChatViewController</code> like you would present any other <code>UIViewController</code>.
/// \code
/// import Crisp
///
/// class YourViewController: UIViewController {
///
///     // ...
///
///     @IBAction func startChat(_ sender: Any) {
///         self.present(ChatViewController(), animated: true)
///     }
/// }
///
/// \endcode<ul>
///   <li>
///     Tip: If you’re using SwiftUI you can present the <code>ChatView</code> instead.
///   </li>
/// </ul>
SWIFT_CLASS_NAMED("ChatViewController")
@interface CRSPChatViewController : UIViewController
/// Initializes the <code>ChatViewController</code>.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)_ SWIFT_UNAVAILABLE;
/// Called after the controller’s view is loaded into memory.
- (void)viewDidLoad;
/// Called to notify the view controller that its view is about to layout its subviews.
- (void)viewWillLayoutSubviews;
/// Performs some action before the view appears.
/// \param animated A Boolean value that indicates whether the view will appear using an
/// animation.
///
- (void)viewWillAppear:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@class NSURL;
@class CRSPEmployment;
@class CRSPGeolocation;

/// Identifies the company with which the current user is affiliated.
SWIFT_CLASS_NAMED("Company")
@interface CRSPCompany : NSObject
/// Company name
@property (nonatomic, readonly, copy) NSString * _Nullable name;
/// Company website URL
@property (nonatomic, readonly, copy) NSURL * _Nullable url;
/// Company description
@property (nonatomic, readonly, copy) NSString * _Nullable companyDescription;
/// User employment in company
@property (nonatomic, readonly, strong) CRSPEmployment * _Nullable employment;
/// Company location
@property (nonatomic, readonly, strong) CRSPGeolocation * _Nullable geolocation;
/// Initializes a new <code>Company</code>.
/// \param name The name for the company.
///
/// \param url The website URL for the company.
///
/// \param companyDescription The description for the company.
///
/// \param employment The user employment in the company.
///
/// \param geolocation The location of the company.
///
- (nonnull instancetype)initWithName:(NSString * _Nullable)name url:(NSURL * _Nullable)url companyDescription:(NSString * _Nullable)companyDescription employment:(CRSPEmployment * _Nullable)employment geolocation:(CRSPGeolocation * _Nullable)geolocation OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class NSLocale;
@class CRSPUser;
@class CRSPSession;

/// The main entry point to set up your Website ID and configure a chat session.
SWIFT_CLASS("_TtC5Crisp8CrispSDK")
@interface CrispSDK : NSObject
/// Associates the Chatbox with your Website ID.
/// important:
/// Make sure to call this method before you interact with any other SDK methods and
/// before you present the Chatbox UI. This can be done for example in your
/// <code>UIApplicationDelegate</code> or <code>UISceneDelegate</code>.
/// \code
/// import Crisp
/// import UIKit
///
/// @main
/// class AppDelegate: UIResponder, UIApplicationDelegate {
///   func application(
///     _ application: UIApplication,
///     didFinishLaunchingWithOptions _: [UIApplication.LaunchOptionsKey: Any]?
///   ) -> Bool {
///     CrispSDK.configure(websiteID: "b8df20e8-0126-4126-b14e-9709f7e58a0d")
///
///     // ...
///
///     return true
///   }
/// }
///
/// \endcodeYou can find your Website ID in the <a href="https://app.crisp.chat/settings/websites/">Crisp
/// dashboard</a>.
/// <img src="copy-website-id" alt="Copy your Website ID"/>
/// \param websiteID Your Website ID.
///
+ (void)configureWithWebsiteID:(NSString * _Nonnull)websiteID;
/// Associates the chat session with a token.
/// If your website shows the chatbox for authenticated users only - in other words: users for
/// which you have an internal identification value, such as an user ID, an email or a token - you
/// may want to ensure that the Crisp chat session associated to that user stays the same,
/// whatever the device he is on and whether your user clears his cookies or not. This ensures you
/// get chats from the same user in the same Crisp session.
/// You can do so using Crisp Tokens. A token is a private and secure arbitrary value that is
/// known to your system, and sent when you inject Crisp in the page. Each user must be associated
/// to a different token (if you use the token system).
/// <a href="https://youtu.be/qiOoW5u211U">Watch a video tutorial</a>
/// <ul>
///   <li>
///     Tip: You can find more information about this concept in the <a href="https://docs.crisp.chat/guides/chatbox-sdks/web-sdk/session-continuity/">documentation of the Web
///     SDK</a>.
///   </li>
/// </ul>
/// \param tokenID A unique token by which your system can identify one of your users.
///
+ (void)setTokenIDWithTokenID:(NSString * _Nonnull)tokenID;
/// Opens the chat view.
/// note:
/// If the <code>ChatViewController</code> (UIKit) or <code>ChatView</code> (SwiftUI) is currently
/// presented, it will switch to the “Chat” tab immediately. If it is not presented yet it
/// will start with the “Chat” tab on the next presentation.
+ (void)openChat;
/// Opens helpdesk search interface.
/// note:
/// If the <code>ChatViewController</code> (UIKit) or <code>ChatView</code> (SwiftUI) is currently
/// presented, it will switch to the “Helpdesk” tab immediately. If it is not presented yet it
/// will start with the “Helpdesk” tab on the next presentation.
+ (void)searchHelpdesk;
/// Opens target helpdesk article.
/// <code>locale</code> and <code>slug</code> can be found in the full URL of the article; slug is the ID at the end
/// of the URL; title and category are optional.
/// \code
/// // Example 1: opens an article with ID '10ud15y' for locale 'en' (English)
/// CrispSDK.openHelpdeskArticle(locale: "en", slug: "10ud15y")
///
/// \endcode\code
/// // Example 1: opens an article with ID '10ud15y' for locale 'en' (English)
/// CrispSDK.openHelpdeskArticle(
///     locale: "en",
///     slug: "1nko1cm",
///     title: "How to install Crisp Live Chat on Nuxt.js",
///     category: "Install Crisp"
/// )
///
/// \endcodenote:
/// If the <code>ChatViewController</code> (UIKit) or <code>ChatView</code> (SwiftUI) is currently
/// presented, it will switch to the Helpdesk article immediately. If it is not presented yet
/// it will start with the Helpdesk article on the next presentation.
/// \param locale The locale of the article to show.
///
/// \param slug The slug of the article to show.
///
/// \param title The title of the article to show.
///
/// \param category The category of the article to show.
///
+ (void)openHelpdeskArticleWithLocale:(NSString * _Nonnull)locale slug:(NSString * _Nonnull)slug title:(NSString * _Nullable)title category:(NSString * _Nullable)category;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSLocale * _Nonnull locale SWIFT_DEPRECATED_MSG("locale is no longer available");)
+ (NSLocale * _Nonnull)locale SWIFT_WARN_UNUSED_RESULT;
+ (void)setLocale:(NSLocale * _Nonnull)value;
/// The shared <code>User</code> object.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) CRSPUser * _Nonnull user;)
+ (CRSPUser * _Nonnull)user SWIFT_WARN_UNUSED_RESULT;
/// The shared <code>Session</code> object.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) CRSPSession * _Nonnull session;)
+ (CRSPSession * _Nonnull)session SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Indicates the manner in which the current user is affiliated with their company.
SWIFT_CLASS_NAMED("Employment")
@interface CRSPEmployment : NSObject
/// User title in company
@property (nonatomic, readonly, copy) NSString * _Nullable title;
/// User role in company
@property (nonatomic, readonly, copy) NSString * _Nullable role;
/// Initializes a new <code>Employment</code>.
/// \param title The user’s title in their company.
///
/// \param role The user’s role in their company.
///
- (nonnull instancetype)initWithTitle:(NSString * _Nullable)title role:(NSString * _Nullable)role OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Indicates the location of the company with which the current user is affiliated.
SWIFT_CLASS_NAMED("Geolocation")
@interface CRSPGeolocation : NSObject
/// City name
@property (nonatomic, readonly, copy) NSString * _Nullable city;
/// Country code
@property (nonatomic, readonly, copy) NSString * _Nullable country;
/// Initializes a new <code>Geolocation</code>.
/// \param city The name of the city.
///
/// \param country The country code.
///
- (nonnull instancetype)initWithCity:(NSString * _Nullable)city country:(NSString * _Nullable)country OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class CRSPSessionEvent;

/// Represents the current session.
SWIFT_CLASS_NAMED("Session")
@interface CRSPSession : NSObject
/// Returns true if a session is ongoing (ie. messages have been received or sent), else false.
@property (nonatomic, readonly) BOOL isOngoing;
/// Returns the current session identifier (or null if not yet loaded).
@property (nonatomic, readonly, copy) NSString * _Nullable identifier;
/// Set the session data for a given key, with a <code>Bool</code> value.
- (void)setBool:(BOOL)value forKey:(NSString * _Nonnull)key;
/// Set the session data for a given key, with a <code>Int</code> value.
- (void)setInt:(NSInteger)value forKey:(NSString * _Nonnull)key;
/// Set the session data for a given key, with a <code>String</code> value.
- (void)setString:(NSString * _Nonnull)value forKey:(NSString * _Nonnull)key;
/// Returns the current session data for a given key.
- (NSString * _Nullable)getStringForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (void)pushEvent:(CRSPSessionEvent * _Nonnull)event SWIFT_DEPRECATED_MSG("", "pushEvents:");
/// Sets one or multiple session events, with a text and an optional data object and optional
/// color.
/// \param events The events to push
///
- (void)pushEvents:(NSArray<CRSPSessionEvent *> * _Nonnull)events;
@property (nonatomic, copy) NSString * _Nullable segment SWIFT_DEPRECATED_MSG("", "segments");
/// Sets the session segments.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable segments;
/// Initiates a new chat session by resetting the chatbox.
/// This method should be invoked when the user logs out in your application.
- (void)reset;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Represents a session event.
/// If you are using Crisp in an app where users are authenticated, you may want to push events
/// to retarget them later on different channels.
/// note:
/// You should not create an instance of this class yourself. Instead interact with the
/// shared instance at <code>CrispSDK/session</code>.
SWIFT_CLASS_NAMED("SessionEvent")
@interface CRSPSessionEvent : NSObject
/// The name of the event.
@property (nonatomic, copy) NSString * _Nonnull name;
/// Set the event data for a given key, with a <code>Bool</code> value.
- (void)setBool:(BOOL)value forKey:(NSString * _Nonnull)key;
/// Set the event data for a given key, with a <code>Int</code> value.
- (void)setInt:(NSInteger)value forKey:(NSString * _Nonnull)key;
/// Set the event data for a given key, with a <code>String</code> value.
- (void)setString:(NSString * _Nonnull)value forKey:(NSString * _Nonnull)key;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


typedef SWIFT_ENUM_NAMED(NSInteger, CRSPSessionEventColor, "SessionEventColor", open) {
  CRSPSessionEventColorRed = 0,
  CRSPSessionEventColorOrange = 1,
  CRSPSessionEventColorYellow = 2,
  CRSPSessionEventColorGreen = 3,
  CRSPSessionEventColorBlue = 4,
  CRSPSessionEventColorPurple = 5,
  CRSPSessionEventColorPink = 6,
  CRSPSessionEventColorBrown = 7,
  CRSPSessionEventColorGrey = 8,
  CRSPSessionEventColorBlack = 9,
};


/// Represents the current user.
/// This class can be utilized to supplement information regarding users, aiding website operators
/// in identifying and segmenting them.
/// note:
/// You should not create an instance of this class yourself. Instead interact with the
/// shared instance at <code>CrispSDK/user</code>.
SWIFT_CLASS_NAMED("User")
@interface CRSPUser : NSObject
/// Sets the user email (must be a valid email).
@property (nonatomic, copy) NSString * _Nullable email;
/// Sets the user nickname.
@property (nonatomic, copy) NSString * _Nullable nickname;
/// Sets the user phone (must be a valid phone number).
@property (nonatomic, copy) NSString * _Nullable phone;
/// Sets the user avatar.
@property (nonatomic, copy) NSURL * _Nullable avatar;
/// Sets the user company (with optional user employment data).
@property (nonatomic, strong) CRSPCompany * _Nullable company;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
